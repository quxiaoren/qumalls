import{_ as s,o as a,c as n,V as l}from"./chunks/framework.4490fb98.js";const p="/qa1.png",g=JSON.parse('{"title":"常见问题","description":"","frontmatter":{},"headers":[],"relativePath":"guide/q-a.md","filePath":"guide/q-a.md"}'),e={name:"guide/q-a.md"},o=l('<h1 id="常见问题" tabindex="-1">常见问题 <a class="header-anchor" href="#常见问题" aria-label="Permalink to &quot;常见问题&quot;">​</a></h1><h2 id="安装依赖时有警告" tabindex="-1">安装依赖时有警告 <a class="header-anchor" href="#安装依赖时有警告" aria-label="Permalink to &quot;安装依赖时有警告&quot;">​</a></h2><p><img src="'+p+`" alt="" data-zoomable=""></p><p>这是一个可以无视的警告，因为依赖已经安装成功了。</p><p>如果对这个问题感兴趣，可以浏览下这个 <a href="https://github.com/pnpm/pnpm/issues/4183" target="_blank" rel="noreferrer">issue</a> ，里面有给出一个忽略警告的方案，就是在 <code>package.json</code> 中添加：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;pnpm&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;peerDependencyRules&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;ignoreMissing&quot;</span><span style="color:#E1E4E8;">: [</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;postcss&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;rollup&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">      ]</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;pnpm&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;peerDependencyRules&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;ignoreMissing&quot;</span><span style="color:#24292E;">: [</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;postcss&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;rollup&quot;</span></span>
<span class="line"><span style="color:#24292E;">      ]</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这样你下次再安装依赖的时候，就不会出现该警告了。</p><h2 id="为什么本地开发环境首次载入很慢" tabindex="-1">为什么本地开发环境首次载入很慢 <a class="header-anchor" href="#为什么本地开发环境首次载入很慢" aria-label="Permalink to &quot;为什么本地开发环境首次载入很慢&quot;">​</a></h2><p>主要是 Vite 的原因，具体可以阅读这篇文章了解《<a href="https://juejin.cn/post/7129041114174062628" target="_blank" rel="noreferrer">为什么有人说 vite 快，有人却说 vite 慢？</a>》。</p><p>Vite 4.3 显著提升了开发服务器的性能，具体可以阅读这篇文章了解《<a href="https://vitejs.dev/blog/announcing-vite4-3.html" target="_blank" rel="noreferrer">Vite 4.3 is out!</a>》，同时框架 v3.0.0 版本开始，vite 也升级到了 4.3 版本。</p><h2 id="项目-url-里的-号能不能去掉" tabindex="-1">项目 URL 里的 # 号能不能去掉 <a class="header-anchor" href="#项目-url-里的-号能不能去掉" aria-label="Permalink to &quot;项目 URL 里的 # 号能不能去掉&quot;">​</a></h2><p>这是因为路由默认使用的是 Hash 模式，你可以在 <code>/src/router/index.ts</code> 修改为 HTML5 模式，但需要注意，开启 HTML5 模式，服务器也需要做相应的配置调整，详细可阅读《<a href="https://next.router.vuejs.org/zh/guide/essentials/history-mode.html" target="_blank" rel="noreferrer">Vue-router 不同的历史模式</a>》。</p><h2 id="页面切换后显示空白" tabindex="-1">页面切换后显示空白 <a class="header-anchor" href="#页面切换后显示空白" aria-label="Permalink to &quot;页面切换后显示空白&quot;">​</a></h2><p>因为路由切换有使用到 <code>&lt;transition&gt;</code> 动画，而 <code>&lt;transition&gt;</code> 组件无法处理多个根节点的组件，所以请检查路由对应所有的页面文件的根节点是否均为单个。</p><p>错误示例：</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">&lt;!-- 需要注意，注释也会被视为一个节点 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">h1</span><span style="color:#E1E4E8;">&gt;text h1&lt;/</span><span style="color:#85E89D;">h1</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">h2</span><span style="color:#E1E4E8;">&gt;text h2&lt;/</span><span style="color:#85E89D;">h2</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  没有节点也是不行的</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">&lt;!-- 需要注意，注释也会被视为一个节点 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">h1</span><span style="color:#24292E;">&gt;text h1&lt;/</span><span style="color:#22863A;">h1</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">h2</span><span style="color:#24292E;">&gt;text h2&lt;/</span><span style="color:#22863A;">h2</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  没有节点也是不行的</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>正确示例：</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">h1</span><span style="color:#E1E4E8;">&gt;text h1&lt;/</span><span style="color:#85E89D;">h1</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">h2</span><span style="color:#E1E4E8;">&gt;text h2&lt;/</span><span style="color:#85E89D;">h2</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    这样就没问题啦</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">h1</span><span style="color:#24292E;">&gt;text h1&lt;/</span><span style="color:#22863A;">h1</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">h2</span><span style="color:#24292E;">&gt;text h2&lt;/</span><span style="color:#22863A;">h2</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    这样就没问题啦</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>相关 <a href="https://github.com/vuejs/vue-next/issues/1850" target="_blank" rel="noreferrer">Issue</a> 说明。</p><h2 id="开发环境修改代码后-路由跳转导致页面空白" tabindex="-1">开发环境修改代码后，路由跳转导致页面空白 <a class="header-anchor" href="#开发环境修改代码后-路由跳转导致页面空白" aria-label="Permalink to &quot;开发环境修改代码后，路由跳转导致页面空白&quot;">​</a></h2><p>参考这个 <a href="https://github.com/vuejs/core/issues/7121" target="_blank" rel="noreferrer">issue</a> ，未来 Vue 官方可能会修复这个问题，目前只能手动刷新浏览器。</p><h2 id="构建报错-提示内存溢出" tabindex="-1">构建报错，提示内存溢出 <a class="header-anchor" href="#构建报错-提示内存溢出" aria-label="Permalink to &quot;构建报错，提示内存溢出&quot;">​</a></h2><p>构建时失败并在错误信息里提示 <code>Reached heap limit Allocation failed - JavaScript heap out of memory</code> 。</p><p>你可以执行 <code>pnpm add cross-env -D</code> 安装 cross-env 依赖，并在 <code>package.json</code> 里修改构建脚本指令：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark has-highlighted-lines vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;scripts&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;build&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;cross-env NODE_OPTIONS=--max-old-space-size=8192 vue-tsc --noEmit &amp;&amp; vite build&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light has-highlighted-lines vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;scripts&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line highlighted"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;build&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;cross-env NODE_OPTIONS=--max-old-space-size=8192 vue-tsc --noEmit &amp;&amp; vite build&quot;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>其中 8192 表示内存空间大小。</p><h2 id="不会-typescript-怎么办" tabindex="-1">不会 TypeScript 怎么办 <a class="header-anchor" href="#不会-typescript-怎么办" aria-label="Permalink to &quot;不会 TypeScript 怎么办&quot;">​</a></h2><p>不管个人还是团队、产品或者项目，从长远考虑我们都建议你学习 TypeScript，因为它是未来的趋势，而且大部分框架、库、插件都是用 TypeScript 开发的，足以证明它是构建一款成熟稳健产品的基石。</p><p>但考虑到实际情况，会各种客观原因存在，如果必须要用传统 JavaScript 进行开发，你可以在 <code>tsconfig.json</code> 里将 <code>allowJs</code> 设置为 <code>true</code> 即可，框架原有的 TypeScript 代码不会受到影响，并且你也可以在项目中使用 JavaScript 编写代码。</p>`,29),t=[o];function c(r,E,i,y,d,h){return a(),n("div",null,t)}const m=s(e,[["render",c]]);export{g as __pageData,m as default};
